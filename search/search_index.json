{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Say hello to peakipy!","text":"<p>Simple deconvolution of NMR peaks for extraction of intensities</p> <ul> <li>Cluster and group overlapping peaks</li> <li>Fit and deconvolute clusters of peaks using selected lineshapes (Gaussian, Lorentzian, Pseudo-Voigt (Gaussian + Lorentzian) or Voigt).</li> <li>Interactively edit initial fitting parameters and evaluate results </li> </ul> <p></p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#protein-l","title":"Protein L","text":"<p>Having processed a spectrum and picked peaks in NMRPipe :</p> <pre><code>peakipy read test.tab test1.ft2 pipe --y-radius-ppm 0.35 --x-radius-ppm 0.035 --show --struc-el disk --outfmt csv\n</code></pre> <p>Since the dimensions are in order ID,F1,F2 (Z,Y,X) there is no need to use the <code>--dims</code> argument.</p> <p></p> <p>A contour plot of the spectrum with clustered peaks (color coded) is generated along with a <code>.csv</code> file of the same name as your original peak list (i.e <code>test.csv</code>).</p> <p>To fit the peaks simply run :</p> <pre><code>peakipy fit test.csv test1.ft2 fits.csv --lineshape G\n</code></pre> <p>the <code>--lineshape G</code> option is used to fit the peaks to a Gaussian lineshape (in both dimensions).</p> <p>If you have a <code>vclist</code> (or equivalent) then you can add this to your output data so that the planes can be sorted based on the vclist column.</p> <pre><code>peakipy fit test.csv test1.ft2 fits.csv --lineshape G --vclist vclist\n</code></pre> <p>For interactive inspection of fits, run <code>peakipy check</code>:</p> <pre><code>peakipy check fits.csv test1.ft2 --outname plots.pdf --clusters 30 --clusters 32 --show --first\n</code></pre> <p></p> <p>Adding the <code>--individual</code> and <code>--label</code> flags will add the simulated lineshape for each fitted peak as a 3D surface along with the assignment labels.</p> <p></p> <p>Omitting the <code>--first</code> flag will result in a multi-page pdf with each plane plotted on a seperate page. If you do not want to interactively display the fits then just omit the <code>--show</code> flag. If you would like to plot the fits for all peaks then omit the <code>--clusters</code> flag.</p> <p>If you find that you need to adjust the parameters of specific fits you can run :</p> <pre><code>peakipy edit test.csv test1.ft2\n</code></pre> <p>Which will open a <code>Bokeh</code> server in which you can adjust individual parameters on each peak.</p> <p></p> <p>To save your edited peak list just click <code>Save</code>. You can open it again later :</p> <pre><code>peakipy edit edited_peaks.csv test1.ft2\n</code></pre> <p>Your fitted intensities can be accessed conveniently through the <code>fits.csv</code> output file using <code>pandas</code> or a spreadsheet.</p>"},{"location":"instructions/","title":"Instructions","text":""},{"location":"instructions/#peak-lists","title":"Peak lists","text":"<p>First you need a peak list in either Sparky, CCPNMRv2 (Analysis2), CCPNMRv3 (assign) or NMRPipe format. Alternatively, a <code>.csv</code> format file can be used. Details of peak list formats are explained below.</p> CCPNMRv3 (a3)CCPNMRv2 (a2)Sparky (sparky)NMRPipe (pipe)Custom .csv (csv)Peakipy .csv (peakipy) <p>Example of a tab delimited peak table exported directly from CCPNMRv3 assign:</p> <pre><code>#   Pid Spectrum    PeakList    Id  Assign F1   Assign F2   Pos F1  Pos F2  LW F1 (Hz)  LW F2 (Hz)  Height  HeightError Volume  VolumeError Merit   Annotation  Comment\n0   1   PK:test1_projection_H_N.1.1 test1_projection_H_N    1   1           10.380684043013412  129.32603752049937  14.179313120050438  18.675223392932594  66224788.0      None        1.0     \n1   2   PK:test1_projection_H_N.1.2 test1_projection_H_N    1   2           9.335853185661527   129.6732286432531   14.962974392261438  18.644570222511447  39807284.0      None        1.0     \n2   3   PK:test1_projection_H_N.1.3 test1_projection_H_N    1   3           9.185077855609203   128.66553436519882  13.786411378949163  18.70449353638719   56258792.0      None        1.0\n</code></pre> <p>Note</p> <p>Empty <code>Assign F1</code> and <code>Assign F2</code> column rows will be replaced with dummy labels. Duplicated assignments will also be appended with dummy labels. This table can be exported from CCPNMRv3 assign by opening your peak list of interest as a module with the following steps:</p> <ul> <li>select peaks (Ctrl/Cmd + a)</li> <li>right click and select <code>Export All Columns</code></li> <li>Save in <code>.tsv</code> format (tab separated) by using the     dropdown for <code>Files of type</code>.</li> </ul> <p>Example of tab delimited peak list exported directly from Analysis2:</p> <pre><code>Number  #       Position F1     Position F2     Sampled None    Assign F1       Assign F2       Assign F3       Height  Volume  Line Width F1 (Hz)  Line Width F2 (Hz)      Line Width F3 (Hz)      Merit   Details Fit Method      Vol. Method\n1       1       9.33585 129.67323       2.00000  {23}H[45]       {23}N[46]       2.0    3.91116e+07     2.14891e+08     15.34578        19.24590    None    1.00000 None    parabolic       box sum\n2       2       10.38068        129.32604       2.00000  {9}H[17]        {9}N[18]        2.0    6.61262e+07     3.58137e+08     15.20785        19.76284        None    1.00000 None    parabolic       box sum\n</code></pre> <p>Note</p> <p><code>Position F1</code> and <code>Position F2</code> are often flipped  (i.e. F1=x and F2=y). I think this happens by default with Analysis2, however, you can chastise me for being an idiot if I'm wrong. <code>peakipy read</code> will flip them automatically, so beware. If you have \"correctly\" labelled columns then you can use <code>--posF1 &lt;column_name&gt;</code> and <code>--posF2 &lt;column_name&gt;</code> to define which column names map to <code>Y_PPM</code> and <code>X_PPM</code>, respectively.</p> <p>Minimum:</p> <pre><code>Assignment  w1  w2\nPeakOne 118 7.5\nPeakTwo 119 7.4\netc...\n</code></pre> <p>Also accepted:</p> <pre><code>Assignment         w1         w2        Volume   Data Height   lw1 (hz)   lw2 (hz)\n    ALA8N-H    123.410      7.967   2.25e+08      15517405       15.8       20.5\nPHE12N-H    120.353      8.712   3.20e+08      44377264        9.3       16.6\netc...\n</code></pre> <p>Default peak list generated by NMRDraw (e.g. test.tab):</p> <pre><code>VARS   INDEX X_AXIS Y_AXIS DX DY X_PPM Y_PPM X_HZ Y_HZ XW YW XW_HZ YW_HZ X1 X3 Y1 Y3 HEIGHT DHEIGHT VOL PCHI2 TYPE ASS CLUSTID MEMCNT\nFORMAT %5d %9.3f %9.3f %6.3f %6.3f %8.3f %8.3f %9.3f %9.3f %7.3f %7.3f %8.3f %8.3f %4d %4d %4d %4d %+e %+e %+e %.5f %d %s %4d %4d\n\nNULLVALUE -666\nNULLSTRING *\n\n    1   159.453    10.230  0.006  0.004    9.336  129.673  7471.831 10516.882   2.886   2.666   16.937   20.268  159  160    9   11 +2.564241e+07 +2.505288e+04 +1.122633e+08 0.00000 1 None    1    1\n    2    17.020    13.935  0.002  0.002   10.381  129.326  8307.740 10488.713   2.671   2.730   15.678   20.752   16   18   13   15 +4.326169e+07 +2.389882e+04 +2.338556e+08 0.00000 1 None    2    1\n    etc...\n</code></pre> <p>A custom .csv file must have the following columns</p> <pre><code>ASS,X_PPM,Y_PPM\ntest1,8.763,117.821\ntest2,8.973,122.359\ntest3,9.005,122.436\n</code></pre> <p>It is also possible to provide peak linewidth, volume and height estimates</p> <pre><code>ASS,X_PPM,Y_PPM,XW_HZ,YW_HZ,VOL,HEIGHT\ntest1,8.763,117.821,20.0,20.0,10,10\ntest2,8.973,122.359,20.0,20.0,10,10\ntest3,9.005,122.436,20.0,20.0,10,10\n</code></pre> <p>You can then run peakipy with the following command</p> <p><code>peakipy read test.csv test.ft3 csv</code></p> <p>If you would like to re-use a peakipy peaklist generated using <code>peakipy read</code> for a new dataset then you can use the <code>peakipy</code> argument</p> <p><code>peakipy read test.csv test.ft3 peakipy</code></p>"},{"location":"instructions/#nmr-spectra","title":"NMR spectra","text":"<p>Peakipy accepts NMRPipe processed spectra only. The input data should be either an NMRPipe 2D or 3D cube. By default, peakipy expects a pseudo-3D spectrum with dimension order ID, F1, F2 (Z, Y, X). It is recommended that you process your spectra so that the dimension order is Z, Y, X. However, you can specify the dimension order using the <code>--dims</code> flag. The order in which the <code>--dims</code> flags are provided reflects the order of the dimensions. The integer values reflect the index of the dimension you are re-ordering.</p> <p>For example:</p> <ul> <li>For a 3D cube with shape <code>(X, Y, Z)</code> you would use <code>--dims 2 --dims 1 --dims 0</code> to re-shape to <code>(Z, Y, X)</code>.</li> <li>For a 3D cube with shape <code>(Y, X, Z)</code> you would use <code>--dims 2 --dims 0 --dims 1</code> to re-shape to <code>(Z, Y, X)</code></li> </ul> <p>The default dimension order is <code>(Z, Y, X)</code> (e.g. ID, F1, F2) (<code>--dims 0 --dims 1 --dims 2</code>).</p> <p>Note</p> <p>By default peakipy expects a pseudo 3D spectrum with dimension order Z, Y, X. For a 2D spectrum with dimension order Y, X then you need to run <code>peakipy read test.tab test.ft2 pipe --dims 0 --dims 1</code></p>"},{"location":"instructions/#peakipy-read","title":"peakipy read","text":"<p>Here is an example of how to read a Sparky peaklist into peakipy:</p> <pre><code>peakipy read peaks.sparky test.ft2 sparky --show\n</code></pre> <p>This converts your peak list into a <code>pandas DataFrame</code> and uses <code>threshold_otsu</code> (<code>scikit-image</code>) to determine a cutoff for clustering overlapping peaks (cluster ids are added to the \"CLUSTID\" column a la NMRPipe!). The clustered peak list is saved as a csv file <code>peaks.csv</code> to be used as input for either <code>peakipy edit</code> or <code>peakipy fit</code>. </p> <p>To set the threshold manually use the <code>--thres</code> option:</p> <pre><code>peakipy read peaks.sparky test.ft2 sparky --show --thres 1e6\n</code></pre> <p>This will exclude signals below 1e6. However, it may be preferable to adjust this parameter interactively using <code>peakipy edit</code>.</p> <p>Below is an example of a clustered peak list. Clustered peaks are colour coded and singlet peaks are black.</p> <p></p> <p>To adjust the clustering behaviour, change the structuring element used for binary closing.</p> <pre><code>peakipy read peaks.sparky test.ft2 --dims 0 --dims 1 --dims 2 --struc-el disk --struc-size 4 0 --show\n</code></pre> <p>The above would use a disk shaped structuring element with a radius of 4 points (see the scikit-image.morphology module for more information).</p> <p>Adjust the radii used for masking the data by setting the <code>--x-radius-ppm</code> and <code>--y-radius-ppm</code> flags:</p> <pre><code>peakipy read peaks.sparky test.ft2 sparky --dims 0 --dims 1 --dims 2 --y-radius-ppm 0.2 --x-radius-ppm 0.04\n</code></pre> <p>Note</p> <p><code>peakipy read</code> will generate a <code>peakipy.config</code> which is subsequently read by <code>edit</code>, <code>fit</code> and <code>check</code> so that the <code>--dims</code> option is not required after running <code>peakipy read</code>: <pre><code>    {\n        \"dims\": [\n            0,\n            1,\n            2\n        ],\n    }\n</code></pre></p>"},{"location":"instructions/#peakipy-edit","title":"peakipy edit","text":"<p>If the automatic clustering is not satisfactory you can manually adjust clusters and initial fitting parameters using <code>peakipy edit</code>. :</p> <pre><code>peakipy edit &lt;peaklist&gt; &lt;nmrdata&gt;\n</code></pre> <p>As of peakipy 2.0.0 this will open a <code>panel</code> session in your internet browser that allows you to interactively edit peak fitting parameters.</p> <p>This command will start a <code>bokeh</code> server and cause a tab to open in your internet browser in which you can interactively edit peak fitting parameters.</p> <p></p> <p>Use the table on the right to select the cluster(s) you are interested and double click to edit values in the table. For example if you think peak1 should be fitted with peak2 but they have different clustids then you can simply change peak2's clustid to match peak1's.</p> <p>Once a set of peaks is selected (or at least one peak within a cluster) you can manually adjust their starting parameters for fitting (including the X and Y radii for the fitting mask, using the sliders).</p> <p>The effect of changing these parameters can be visualised by clicking on the <code>Fit selected</code>.</p> <p>Note</p> <p>If using matplotlib you will need to have your interactive backend correctly configured by editing your matplotlibrc file. If you don't know where that is then you can find it by importing matplotlib into your Python interpreter and typing <code>matplotlib.get_data_path()</code>. If you have trouble with opening interactive matplotlib my first suggestion is to check that you have a <code>matplotlibrc</code> file placed in your home directory <code>~/.matplotlib/matplotlibrc</code> with the backend option set to either <code>TkAgg</code> or <code>Agg</code>. These usually work:</p> <pre><code>    backend: TkAgg\n</code></pre> <p>or :</p> <pre><code>    backend: Agg\n</code></pre> <p>or for Mac users :</p> <pre><code>    backend: macosx\n</code></pre> <p>To test other peak clustering settings you can adjust the contour level (akin to changing <code>--thres</code>) or adjust the dimensions of the structuring element used for binary closing.</p> <p></p> <p>If you like the parameters you have chosen then you can save the peak list using the <code>save</code> button. If you want to return to your edited peak list at a later stage then run <code>peakipy edit</code> with the edited peak list as your <code>&lt;peaklist&gt;</code> argument.</p> <p>Clicking <code>Quit</code> closes the bokeh server.</p> <p>Peaks can be added via the <code>tap</code> button on the right side of the spectrum. Once the tap button is activated then peaks are added to the spectrum by double clicking at the desired position.</p>"},{"location":"instructions/#peakipy-fit","title":"peakipy fit","text":"<p>Once you are satisfied with your initial fitting parameters <code>peakipy fit</code> can be run using the peak list generated by <code>peakipy read</code> or <code>peakipy edit</code> (e.g. <code>edited_peaks.csv</code>).</p> <p>For example... </p> <pre><code>peakipy fit edited_peaks.csv test.ft2 fits.csv --dims 0 --dims 1 --dims 2 --lineshape PV\n</code></pre> <p>Fits that are likely to need checking are flagged in the <code>log.txt</code> file.</p> <p>If you have a <code>vclist</code> style file containing your delay values then you can run <code>peakipy fit</code> with the <code>--vclist</code> option:</p> <pre><code>peakipy fit edited_peaks.csv test.ft2 fits.csv --lineshape PV --vclist vclist\n</code></pre> <p>This will result in an extra column being added to your <code>fits.csv</code> file called <code>vclist</code> containing the corresponding delay values.</p> <p>Note</p> <p>Here is an example of a vclist style file</p> <pre><code>0.1\n0.2\n0.4\n0.8\n1.0\n</code></pre>"},{"location":"instructions/#checking-fits","title":"Checking fits","text":"<p>To plot fits for all planes or interactively check them you can run <code>peakipy check</code>:</p> <pre><code>peakipy check fits.csv test.ft2 --clusters 1 --clusters 10 --clusters 20 --show\n</code></pre> <p>Will plot clusters 1,10 and 20 showing each plane in an interactive matplotlib window and save the plots to a multipage pdf called plot.pdf. Calling <code>peakipy check</code> with the <code>--first</code> flag results in only the first plane of each fit being plotted. The colour or output plots can be changed using the <code>--colors</code> like so:</p> <pre><code>peakipy check fits.csv test1.ft2 --colors green purple --clusters 30 --show --first\n</code></pre> <p></p> <p>Only valid matplotlib color names can be used.</p> <p>To open an interactive <code>panel</code> in your web browser</p> <pre><code>peakipy check fits.csv test.ft2 --panel\n</code></pre> <p>Run <code>peakipy check --help</code> for more options.</p>"},{"location":"instructions/#excluding-peaks","title":"Excluding peaks","text":"<p>Peaks can be excluded from fitting by changing the value in the <code>include</code> column from <code>yes</code> to <code>no</code> (in the <code>.csv</code> file containing your peak list). The easiest way to do this is via the <code>peakipy edit</code> script.</p>"},{"location":"instructions/#protocol","title":"Protocol","text":"<p>Initial parameters for FWHM, peak centers and fraction are fitted from the sum of all planes in your spectrum (for best signal to noise). Following this, the default method is to fix the center, linewidth and fraction parameters only fitting the amplitudes for each plane. If you want to float all parameters, this can be done with <code>--fix None</code> or you could just float the linewidths and amplitudes with <code>--fix fraction --fix center</code>.</p>"},{"location":"instructions/#outputs","title":"Outputs","text":"<ol> <li> <p>Pandas DataFrame containing fitted intensities/linewidths/centers     etc:</p> <pre><code>,fit_prefix,assignment,amp,amp_err,center_x,center_y,sigma_x,sigma_y,fraction,clustid,plane,x_radius,y_radius,x_radius_ppm,y_radius_ppm,lineshape,fwhm_x,fwhm_y,center_x_ppm,center_y_ppm,sigma_x_ppm,sigma_y_ppm,fwhm_x_ppm,fwhm_y_ppm,fwhm_x_hz,fwhm_y_hz\n0,_None_,None,291803398.52980924,5502183.185104156,158.44747896487527,9.264911100915297,1.1610674220702277,1.160506074898704,0.0,1,0,4.773,3.734,0.035,0.35,G,2.3221348441404555,2.321012149797408,9.336283145411077,129.6698850201278,0.008514304888101518,0.10878688239041588,0.017028609776203036,0.21757376478083176,13.628064792721176,17.645884354478063\n1,_None_,None,197443035.67109975,3671708.463467884,158.44747896487527,9.264911100915297,1.1610674220702277,1.160506074898704,0.0,1,1,4.773,3.734,0.035,0.35,G,2.3221348441404555,2.321012149797408,9.336283145411077,129.6698850201278,0.008514304888101518,0.10878688239041588,0.017028609776203036,0.21757376478083176,13.628064792721176,17.645884354478063\netc...\n</code></pre> </li> <li> <p><code>log.txt</code> contains fit reports for all fits</p> </li> <li>If <code>--plot &lt;path&gt;</code> option selected when running <code>peakipy fit</code>, the     first plane of each fit will be plotted in \\&lt;path&gt; with the files     named according to the cluster ID (clustid) of the fit. Adding     <code>--show</code> option calls <code>plt.show()</code> on each fit so you can see what     it looks like. However, using <code>peakipy check</code> should be preferable     since plotting the fits during fitting slows down the process a lot.</li> </ol> <p>You can explore the output data conveniently with <code>pandas</code>. :</p> <pre><code>In [1]: import pandas as pd\n\nIn [2]: import matplotlib.pyplot as plt\n\nIn [3]: data = pd.read_csv(\"fits.csv\")\n\nIn [4]: groups = data.groupby(\"assignment\")\n\nIn [5]: for ind, group in groups:\n   ...:     plt.errorbar(group.vclist,group.amp,yerr=group.amp_err,fmt=\"o\",label=group.assignment.iloc[0])\n   ...:     plt.legend()\n   ...:     plt.show()\n</code></pre>"},{"location":"lineshapes/","title":"Lineshapes","text":"<p>Here are the lineshapes used by peakipy. Use the <code>--lineshape</code> option in <code>peakipy fit</code> to select a lineshape for fitting.</p> <p>For example,</p> <pre><code>peakipy fit test.csv test1.ft2 fits.csv --lineshape G\n</code></pre> <p>would fit to a Gaussian lineshape in both dimensions. Other options are V, L or PV for Voigt Lorentzian or Pseudo-Voigt in both dimensions, respectively. If you want to fit a seperate lineshape for the indirect dimension then PV_PV allows you to fit a Pseudo-Voigt with seperate X and Y fraction parameters</p>"},{"location":"lineshapes/#gaussian","title":"Gaussian","text":"\\[A\\frac{1}{\\sigma_g\\sqrt{2\\pi}} e^{\\frac{-(x - center)^2 } { 2 \\sigma_g^2}}\\] <p>Where \\(A\\) is the amplitude (amp), \\(\\sigma_g\\) is the standard deviation and \\(center\\) is the center of the Gaussian function. The full width at half maximum (FWHM) is \\(2\\sigma_g\\sqrt{2ln2}\\).</p>"},{"location":"lineshapes/#lorentzian","title":"Lorentzian","text":"\\[A\\frac{1}{\\pi} \\left( \\frac{\\sigma}{(x - center)^2 + \\sigma^2}\\right)\\] <p>Where \\(A\\) is the amplitude (amp), \\(\\sigma\\) is the standard deviation of the gaussian function and \\(center\\) is the center of the Gaussian peak. The full width at half maximum (FWHM) is \\(2\\sigma\\)</p>"},{"location":"lineshapes/#pseudo-voigt","title":"Pseudo-Voigt","text":"\\[A\\left[\\frac{(1-fraction)}{\\sigma_g\\sqrt{2\\pi}} e^{\\frac{-(x - center)^2 }{ 2 \\sigma_g^2}} + \\frac{fraction}{\\pi} \\left( \\frac{\\sigma}{(x - center)^2 + \\sigma^2}\\right)\\right]\\] <p>This is the default lineshape used for fitting and the fraction of G or L is assumed to be the same for both dimensions. The <code>--lineshape PV_PV</code> option will fit a seperate pseudo-voigt lineshape in each dimension (i.e. fraction_x and fraction_y parameters).</p>"},{"location":"lineshapes/#fit-quality","title":"Fit quality","text":"<p>Fit quality can be evaluated by inspecting the contour plot of residuals that is generated when viewing fits interactively. \\(\\chi^2\\) and \\(\\chi_{red}^2\\) are calculated using the noise estimate from <code>--noise</code> or the threshold value calculated from <code>threshold_otsu</code> if <code>--noise</code> is not set explicitly. Peakipy does calculate the linear correlation between the NMR data and the simulated data from the fit. If the slope deviates by more than 0.05 from 1.0 then it is advised that you check the fit. However, this is not totally robust and it is best to check fit quality by plotting the data using the <code>peakipy check</code> command.</p>"},{"location":"lineshapes/#amplitudes","title":"Amplitudes","text":"<p>The amplitude parameter (\\(A\\)) for each peak can be thought of as a scaling factor on the above lineshape functions. The lineshape functions themselves (i.e. everything after the \\(A\\)) are normalized between 0 and 1. You should ensure that the baseline of your data is around 0 otherwise this could result in systematic errors in fitted lineshape parameters (consider adding polynomial baseline corrections to your data if this is the case). For clarity, the <code>amp</code> column in the output fits <code>.csv</code> refers to the amplitude parameter and is synonymous with the volume of the peak. The <code>height</code> column is calculated based on the fitted lineshape parameters. </p> <p>Note</p> <p>Changing peak fitting settings such as masking radius could result differences in the fitted linewidths.</p>"},{"location":"quickstart/","title":"Quickstart Instructions","text":"<p>This guide provides a quick overview of how to get started with <code>peakipy</code>. Follow these instructions to set up your environment, install the necessary components, and execute basic commands.</p>"},{"location":"quickstart/#inputs","title":"Inputs","text":"<p>To work with <code>peakipy</code>, you will need the following input files: 1. Peak List: A formatted file that describes the peaks of interest. Refer to the instructions for formatting guidance. 2. NMRPipe Frequency Domain Dataset: This can be a 2D or pseudo 3D dataset for processing.</p>"},{"location":"quickstart/#main-commands","title":"Main Commands","text":"<p><code>peakipy</code> provides four main commands to facilitate peak analysis:</p> <ol> <li> <p><code>peakipy read</code>    Converts your peak list into a <code>.csv</code> file while selecting clusters of peaks. Usage: <pre><code>peakipy read [PEAK_LIST_FILE] [NMR_DATA_FILE] [OUTPUT_FORMAT] [OPTIONS]\n</code></pre></p> </li> <li> <p><code>peakipy edit</code>    Interactively checks and adjusts fit parameters (i.e., clusters and mask radii) if the initial clustering is not satisfactory. Usage: <pre><code>peakipy edit [PEAK_LIST_FILE] [NMR_DATA_FILE] [OPTIONS]\n</code></pre></p> </li> <li> <p><code>peakipy fit</code>    Fits clusters of peaks using the <code>.csv</code> peak list generated (or edited) by the <code>read</code> (or <code>edit</code>) command(s). Usage: <pre><code>peakipy fit [PEAK_LIST_FILE] [NMR_DATA_FILE] [OUTPUT_FILE] [OPTIONS]\n</code></pre></p> </li> <li> <p><code>peakipy check</code>    Checks individual fits or groups of fits and generates plots. Usage: <pre><code>peakipy check [OUTPUT_FILE] [NMR_DATA_FILE] [OPTIONS]\n</code></pre></p> </li> </ol> <p>For more details on how to run these scripts, check the instructions. You can also use the <code>--help</code> flag for further guidance on running each command (e.g., <code>peakipy read --help</code>).</p>"},{"location":"quickstart/#how-to-install-peakipy","title":"How to Install <code>peakipy</code>","text":""},{"location":"quickstart/#using-uv-recommended","title":"Using <code>uv</code> (recommended)","text":"<p>Either of the following approaches should work:</p> <ol> <li>Clone the <code>peakipy</code> repository:    <pre><code>git clone https://github.com/j-brady/peakipy.git\ncd peakipy\nuv sync\n</code></pre></li> </ol> <p>The <code>uv sync</code> command will automatically create a virtual environment for you in <code>.venv</code> which you can then activate with the usual <code>source .venv/bin/activate</code>.</p> <ol> <li>Install from PyPI:    <pre><code>uv venv --python 3.12\nsource .venv/bin/activate\nuv pip install peakipy\n</code></pre></li> </ol>"},{"location":"quickstart/#using-pip","title":"Using pip","text":"<ol> <li>Install <code>peakipy</code> using pip:    <pre><code>pip install peakipy\n</code></pre></li> </ol>"},{"location":"quickstart/#example-bash-script","title":"Example Bash Script","text":"<p>Below is an example of an installation script and a basic use case:</p> <pre><code>#!/bin/bash\n# Create a virtual environment and activate it\nuv venv --python 3.12\nsource .venv/bin/activate\n\n# Install peakipy\nuv pip install peakipy\n\n# Process some data using peakipy\npeakipy read peaks.a2 test.ft2 a2 --y-radius-ppm 0.213 --show\npeakipy edit peaks.csv test.ft2  # Adjust fitting parameters\npeakipy fit peaks.csv test.ft2 fits.csv --vclist vclist --max-cluster-size 15\npeakipy check fits.csv test.ft2 --clusters 1 --clusters 2 --clusters 3 --colors purple green --show --outname tmp.pdf\n</code></pre> <p>Run this script by sourcing the file: <pre><code>source file_containing_commands\n</code></pre></p> <p>Note: It is recommended to use a virtual environment: <pre><code>uv venv --python 3.12\nsource .venv/bin/activate\n# or for csh:\nsource .venv/bin/activate.csh\n</code></pre></p>"},{"location":"quickstart/#requirements","title":"Requirements","text":""},{"location":"quickstart/#latest","title":"Latest","text":"<p>The latest version (2.1.2) of <code>peakipy</code> requires Python 3.11 or above (see <code>pyproject.toml</code> for details).</p>"},{"location":"quickstart/#legacy-version-020","title":"Legacy Version (0.2.0)","text":"<p><code>peakipy</code> version 0.2.0, which runs on Python 3.8, can be installed as follows: <pre><code>git clone --branch v0.2 https://github.com/j-brady/peakipy.git\ncd peakipy\npoetry install\n</code></pre> Or: <pre><code>pip install peakipy==0.2.0\n</code></pre></p>"}]}